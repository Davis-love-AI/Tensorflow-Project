数据集目录结构：
-cat_and_dog_r
  -dog
    dog_0000.jpg
    dog_0001.jpg
    ...
  -cat
    cat_0000.jpg
    cat_0001.jpg
    ...
  ...

5.1 生成TFRecords格式数据

import tensorflow as tf
import os
from PIL import Image

def create_record(cmd = "D:/Test_TFRecords/catT_and_dogF", classes={'catT', 'dogF'}, img_height=224, img_width=224):
  writer = tf.python_io.TFRecordWriter("D:/Test_TFRecords/train.tfrecords")
  for index, name in enumerate(classes):
    class_path = cmd + os.sep + name + os.sep
    for img_name in os.listdir(class_path):
      img_path = class_path + img_name
      img = Image.open(img_path)
      img = img.resize((img_height, img_width))
      img = img.tobytes()
      example = tf.train.Example(features=tf.train.Features(feature={
        "label":tf.train.Feature(int64_list=tf.train.Int64List(value=[index])),
        "image":tf.train.Feature(bytes_list=tf.train.BytesList(value=[img]))
      }))
      writer.write(example.SerializeToString())
  writer.close()

create_record()
    
5.2 读取TFRecords

import tensorflow as tf
from PIL import Image

def batch_read_and_decode(filename, img_height=224, img_width=224, batchSize=1):
    filename_queue = tf.train.string_input_producer([filename], shuffle=False)
    reader = tf.TFRecordReader()
    _, serialized_example = reader.read(filename_queue)
    features = tf.parse_single_example(serialized_example,
        features={
           'label': tf.FixedLenFeature([], tf.int64),
           'image': tf.FixedLenFeature([], tf.string),
        }
    )
    label = features['label']
    img = features['image']
    img = tf.decode_raw(img, tf.uint8)
    img = tf.reshape(img, [img_height, img_width, 3])
    # img = tf.cast(img, tf.float32) * (1. / 128) - 0.5
    label = tf.cast(label, tf.int32)
    min_after_dequeue = batchSize * 2
    capacity = min_after_dequeue + batchSize
    exampleBatch, labelBatch = tf.train.shuffle_batch([img, label], batch_size=batchSize, capacity=capacity,
                                                      min_after_dequeue=min_after_dequeue)
    return exampleBatch, labelBatch

if __name__ == "__main__":
    init = tf.initialize_all_variables()
    exampleBatch, labelBatch = batch_read_and_decode("train.tfrecords")

    with tf.Session() as sess:
        sess.run(init)
        coord = tf.train.Coordinator()
        threads = tf.train.start_queue_runners(coord=coord)

        for i in range(100):
            example, label = sess.run([exampleBatch, labelBatch])
            print(example.shape, label)

            img = Image.fromarray(example[0], 'RGB')
            img.save("D:/Test_TFRecords/img/" + str(i) + ".jpg")

        coord.request_stop()
        coord.join(threads)
  
  5.2 Slim 读取 TFRecords 格式数据
  缺失文件网址
  https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/slim/python/slim/data/dataset_data_provider_test.py
  
  import tensorflow as tf
  import slim

  with tf.Session() as sess:

      import tensorflow.contrib.slim.python.slim.data.dataset_data_provider_test as datset

      res = datset._create_tfrecord_dataset("")
      from tensorflow.contrib.slim.python.slim.data import dataset_data_provider

      provider = dataset_data_provider.DatasetDataProvider(res)
      [image] = provider.get(['image'])
      [label] = provider.get(['label'])
      image = datset._resize_image(image, 224, 224)
      import tensorflow.contrib.slim.python.slim.queues as queues

      with queues.QueueRunners(sess):
          image, label = sess.run([image, label])
          print(image.shape)
