图片目录结构：
-jpg
  -001 第一类文件夹
     image_0000.jpg
     image_0001.jpg
     ...
  -002 第二类文件夹
    image_0000.jpg
    image_0001.jpg
    ...
  ...

3.1 生成TFRecords

writer = tf.python_io.TFRecordWriter("train.tfrecords")
for name in os.listdir(path):
  class_path = path + os.sep + name
  for img_name in os.listdir(class_path):
    img_path = class_path + os.sep + img_name
    img = Image.open(img_path)
    img = img.resize((500, 500))
    img_raw = img.tobytes()
    example = tf.train.Example(features=tf.train.Features(feature={
      "label":tf.train.Feature(int64_lisst=tf.train.Int64List(value=[name])),
      "image":tf.train.Feature(bytes_list=tf.train.ByteList(value=[img_raw]))
    }))
    writer.write(example.SerializeToString())
    
3.2 读取TFRecords

def read_and_decode(filename):
  filename_queue = tf.train.string_input_producer([filename])

  reader = tf.TFRecordReader()
  _, serialized_example = reader.read(filename_queue)
  features = tf.parse_single_example(serialized_example,
    features={
      'label': tf.FixedLenFeature([], tf.int64),
      'image': tf.FixedLenFeature([], tf,string),
    })

  img = tf.decode_raw(features['image', tf.uint8])
  img = tf.reshape(img, [300, 300, 3])

  img = tf.cast(img, tf.float32) * (1 / 128) - 0.5
  label = tf.cast(features['label'], tf.int32)
  
  return img, label


filename = "train.tfrecords"
img, label = read_and_decode(filename)

img_batch, label_batch = tf.train.shuffle_batch([], batchsize=1, capacity=10, min_after_dequeue=1)
init = tf.initialize_all_variables()
sess = tf.Session()
sess.run(init)
threads = tf.train.start_queue_runners(sess=sess)

for _ in range(10):
  val = sess.run(img_batch)
  label = sess.run(label_batch)
  val.resize((300, 300, 3))
  cv2.imshow("cool", val)
  cv2.waitKey()
  print(label)
